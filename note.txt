//State Management

/use RxJs for state management
	-Ngrx state management flow
	-use Subject = action state, BehaviorSubject = reducer state to store state, Service injection = selector state
	/Subject = is type of Observable, that allow to multicast to multiple Observable
		-multicast = process that single observable sharing data to multiple subscribers, while ensure that each subscriber receive the same data
			-subscriber = Observer -> entity(object) that subscribe some thing (that something in this we call Observable) to observe the emit value from that thing (that thing in here is Observable) 
		-Observable = is a stream of data , event emit that can be observed
		-asObservable() -> convert into a read-only observable (prevent to use next(), error(), complete() directly) just only can subscribe the thing that emit out of that
	/BehaviorSubject = we can stored, edit value inside behaviorSubject and then emit to another subscriber
		-but Subject() not stored value inside it's just a emit data to another subscriber
	-Encapsulation coding -> write code for prevent access directly
	-map() = use to transform the value emitted from observable into new value, distinctUntilChanged() = use for handle data emit that will be duplicate if it duplicate it's will not execute, shareReplay() = share a subscribtion from observable and replay emit value to the new subscribtion, pipe async ( | async) = use to subscribe and update new value that emit by observable
	-switchMap() = switch to another observable and canceling the previous one if it's still emitting value, tap() = use for debug, log value from  observable, catchError() = use for handle error that may occur within an observable, withLatestFrom() = use to combine the value from two or more observables for do something, (use with opertor that following)
	-observable: NEVER -> return observable that do nothing

	/create type interface with api data
	-if data like 
	`count:1292
	next:"https://pokeapi.co/api/v2/pokemon?offset=201&limit=1"
	previous:"https://pokeapi.co/api/v2/pokemon?offset=199&limit=1"
	results: [
	{
	name:"unown"
	url:"https://pokeapi.co/api/v2/pokemon/201/"
	}
	]`
	-we will create interface type like this
	`export interface PokemonListResponse {
  	count: number;
  	next: string | null;
  	previous: string | null;
  	results: PokemonListItem[];
	}
	export interface PokemonListItem {
  	name: string;
  	url: string;
	}`

/ngRx
	-on(someAction, (state, action) => {
	// Define how state should change
	return newState
	})
	-StoreModule.forRoot({counter: counterReducer}) -> counterReducer manage counter store
		-StoreModule = store
		-counter = is a piece of store that managed by counterReducer
			-counter = store prop 'count' from reduce and change by counterReducer
		-dispatch action process by reducer -> when action dispatch -> go to store and see what reducer is manage this state action -> state change follow by setting of reducer***
	-when inject => constructor (private store: Store<{ store_of_state, what_type_of_data_that_store_should_contain}>
	-map() RxJs -> convert each value emit to observable
	-pipe() RxJs -> allow you to apply RxJs operators
	-'async' pipe -> handle the subscription and update***

/state management Fireship
	-principle of redux
	-next for use state management with data realtime for API

/Joshua NgRx
	-NgRx state management lifecycle
	-payload -> props = data that will send along with action
	-createSelector??
	-middleware -> mechanism that process the 'action' before they reach the 'reducer'??
	-memorization -> is technic that use to optimize the performance of selectors


-create project with use all state management -CRUD API, BootStrap, life-cycle
-express typescript, socket-io, JWT, jira, CI/CD
-app service queues and caching

13/10/66
-selector ngrx -> manage, provide state from store to components
-effect ngrx -> use for handle event that can be side effect (error) use for job like API
	-> use effect for handle and then take that to action

/NgRx Monster
	-install dependencies
		-templateUrl -> specific path of HTML that component.ts use to render
		-of() rxjs -> convert value to observable
		-@Injectable -> for make class can dependency injection to another component
	-bind ngrx store to module, bind ngrx store dev tool
		-StoreModule.forRoot({}, {}) -> StoreModule.forRoot = use for setting NgRx store in app, ({}, {}) = {} no initial state define and {} no additional config use config default
		-EffectsModule.forRoot([]) = no initially NgRx effect
		-use redux dev tool in google web browser
	-create state type that can be happen (isLoading, success, error)
	-create action
		-createAction NgRx -> createAction('[Component or Module of this component] Verb of component action', (take in put) => ({return object})) -> the input represent 'payload' with action -> and then use this action to 'dispatch'
	-create reducer -> responsibility handle how state change when dispatch action is happend
		-create initial state -> should be js object
		-createReducer(initial_state, on(use to set the action state change))
			-on(action, how_state_change), {...state} = copy exist state (cause we will not direct access/edit old state, {counter: state.counter + 1} = change state by edit 'counter' property inside state by +1
	-adding reducer to store
		-create module -> a lot in chatGPT
		-use StoreModule.forFeature('name string reducer function', reducer function)
	-adding state to selector -> make the state to inside components
		-createSelector() -> you fetch state from store (global) already, so we inject Store and use it (selector)
		-select() ngrx -> use for select specific piece of state from store
		-if we use async pipe we will not subscribe and unsubscribe
	-adding effects -> for waiting data like API

/How to use Redux DevTools			
	-state tab -> tree, chart, raw -> tell information about state
	-action tab -> see action dispatch
	-diff tab -> to see how the action state change
	-dispatch, inspection(like a history)
	-persist, trace and test -> persist for keep event refresh browser, and test can use with test tool (ex jest)